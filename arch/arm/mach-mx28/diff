diff --git a/arch/arm/mach-mx28/device.c b/arch/arm/mach-mx28/device.c
index f008346..bf4a904 100644
--- a/arch/arm/mach-mx28/device.c
+++ b/arch/arm/mach-mx28/device.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2009-2010 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2009-2012 Freescale Semiconductor, Inc. All Rights Reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -34,7 +34,10 @@
 
 #include <asm/mach/map.h>
 
+#include <mach/system.h>
 #include <mach/hardware.h>
+#include <mach/regs-pwm.h>
+#include <mach/regs-pinctrl.h>
 #include <mach/regs-timrot.h>
 #include <mach/regs-lradc.h>
 #include <mach/regs-ocotp.h>
@@ -47,7 +50,11 @@
 
 #include "regs-digctl.h"
 #include "device.h"
-#include "mx28evk.h"
+#if defined(CONFIG_MACH_TS7600)
+  #include "ts7600.h"
+#else
+  #include "mx28evk.h"
+#endif
 #include "mx28_pins.h"
 
 #if defined(CONFIG_SERIAL_MXS_DUART) || \
@@ -356,7 +363,7 @@ static struct gpmi_nfc_platform_data  gpmi_nfc_platform_data = {
 	.platform_exit           = gpmi_nfc_platform_exit,
 	.min_prop_delay_in_ns    = 5,
 	.max_prop_delay_in_ns    = 9,
-	.max_chip_count          = 2,
+	.max_chip_count          = 1,
 	.boot_area_size_in_bytes = 20 * SZ_1M,
 	.partition_source_types  = gpmi_nfc_partition_source_types,
 	.partitions              = 0,
@@ -420,23 +427,63 @@ static void mx28_init_gpmi_nfc(void)
 }
 #endif
 
+static void mx28_init_fpgaclk(void) 
+{
+	struct clk *pwm_clk = clk_get(NULL, "pwm");
+	clk_enable(pwm_clk);
+	mxs_reset_block(REGS_PWM_BASE, 1);
+	                                                                                       
+	__raw_writel(BF_PWM_ACTIVEn_INACTIVE(1) |
+		BF_PWM_ACTIVEn_ACTIVE(0),
+		REGS_PWM_BASE + HW_PWM_ACTIVEn(2));
+	__raw_writel(BF_PWM_PERIODn_CDIV(0) |   /* divide by 64 */
+		BF_PWM_PERIODn_INACTIVE_STATE(2) | /* low */
+		BF_PWM_PERIODn_ACTIVE_STATE(3) |   /* high */
+		BF_PWM_PERIODn_PERIOD(1),
+		REGS_PWM_BASE + HW_PWM_PERIODn(2));
+	__raw_writel(BM_PWM_CTRL_PWM2_ENABLE, REGS_PWM_BASE + HW_PWM_CTRL_SET);
+}
+
+#define INT0		MXS_PIN_TO_GPIO(PINID_GPMI_CLE)
+#define INT1		MXS_PIN_TO_GPIO(PINID_GPMI_CE1N)
+#define	INT2		MXS_PIN_TO_GPIO(PINID_AUART1_RX)
+static void mx28_init_fpga_irq(void)
+{
+	gpio_request(INT0, "int0");
+	gpio_request(INT1, "int1");
+	__raw_writel(((1 << 27) | (1 << 17)),
+	  REGS_PINCTRL_BASE + HW_PINCTRL_IRQLEVEL0_SET);
+	__raw_writel(((1 << 27) | (1 << 17)),
+	  REGS_PINCTRL_BASE + HW_PINCTRL_IRQPOL0_SET);
+	gpio_request(INT2, "int2");
+	__raw_writel((1 << 4),
+	  REGS_PINCTRL_BASE + HW_PINCTRL_IRQLEVEL3_SET);
+	__raw_writel((1 << 4),
+	  REGS_PINCTRL_BASE + HW_PINCTRL_IRQPOL3_SET);
+}
+	
+
 #if defined(CONFIG_MMC_MXS) || defined(CONFIG_MMC_MXS_MODULE)
-#if defined(CONFIG_MACH_MX28EVK)
+#if defined(CONFIG_MACH_MX28EVK) || defined(CONFIG_MACH_TS7600)
 #define MMC0_POWER	MXS_PIN_TO_GPIO(PINID_PWM3)
-#define MMC1_POWER	MXS_PIN_TO_GPIO(PINID_PWM4)
+#define MMC1_POWER	MXS_PIN_TO_GPIO(PINID_PWM3)
 #define MMC0_WP		MXS_PIN_TO_GPIO(PINID_SSP1_SCK)
 #define MMC1_WP		MXS_PIN_TO_GPIO(PINID_GPMI_RESETN)
 #endif
 
 static int mxs_mmc_get_wp_ssp0(void)
 {
+#if 0
 	return gpio_get_value(MMC0_WP);
+#endif 
+	return 0;
 }
 
 static int mxs_mmc_hw_init_ssp0(void)
 {
 	int ret = 0;
 
+#if 0
 	/* Configure write protect GPIO pin */
 	ret = gpio_request(MMC0_WP, "mmc0_wp");
 	if (ret)
@@ -444,11 +491,12 @@ static int mxs_mmc_hw_init_ssp0(void)
 
 	gpio_set_value(MMC0_WP, 0);
 	gpio_direction_input(MMC0_WP);
-
+#endif
 	/* Configure POWER pin as gpio to drive power to MMC slot */
-	ret = gpio_request(MMC0_POWER, "mmc0_power");
+/*	ret = gpio_request(MMC0_POWER, "mmc0_power");
 	if (ret)
 		goto out_power;
+*/
 
 	gpio_direction_output(MMC0_POWER, 0);
 	mdelay(100);
@@ -456,15 +504,19 @@ static int mxs_mmc_hw_init_ssp0(void)
 	return 0;
 
 out_power:
+#if 0
 	gpio_free(MMC0_WP);
+#endif
 out_wp:
 	return ret;
 }
 
 static void mxs_mmc_hw_release_ssp0(void)
 {
+#if 0
 	gpio_free(MMC0_POWER);
 	gpio_free(MMC0_WP);
+#endif
 
 }
 
@@ -490,15 +542,19 @@ static unsigned long mxs_mmc_setclock_ssp0(unsigned long hz)
 	return hz;
 }
 
-static int mxs_mmc_get_wp_ssp1(void)
+static int mxs_mmc_get_wp_ssp2(void)
 {
+#if 0
 	return gpio_get_value(MMC1_WP);
+#endif
+	return 0;
 }
 
-static int mxs_mmc_hw_init_ssp1(void)
+static int mxs_mmc_hw_init_ssp2(void)
 {
 	int ret = 0;
 
+#if 0
 	/* Configure write protect GPIO pin */
 	ret = gpio_request(MMC1_WP, "mmc1_wp");
 	if (ret)
@@ -506,11 +562,14 @@ static int mxs_mmc_hw_init_ssp1(void)
 
 	gpio_set_value(MMC1_WP, 0);
 	gpio_direction_input(MMC1_WP);
+#endif
 
 	/* Configure POWER pin as gpio to drive power to MMC slot */
+/*
 	ret = gpio_request(MMC1_POWER, "mmc1_power");
 	if (ret)
 		goto out_power;
+*/
 
 	gpio_direction_output(MMC1_POWER, 0);
 	mdelay(100);
@@ -518,28 +577,32 @@ static int mxs_mmc_hw_init_ssp1(void)
 	return 0;
 
 out_power:
+#if 0
 	gpio_free(MMC1_WP);
+#endif
 out_wp:
 	return ret;
 }
 
-static void mxs_mmc_hw_release_ssp1(void)
+static void mxs_mmc_hw_release_ssp2(void)
 {
+#if 0
 	gpio_free(MMC1_POWER);
 	gpio_free(MMC1_WP);
+#endif
 }
 
-static void mxs_mmc_cmd_pullup_ssp1(int enable)
+static void mxs_mmc_cmd_pullup_ssp2(int enable)
 {
-	mxs_set_pullup(PINID_GPMI_RDY1, enable, "mmc1_cmd");
+	mxs_set_pullup(PINID_SSP0_DATA6, enable, "mmc1_cmd");
 }
 
-static unsigned long mxs_mmc_setclock_ssp1(unsigned long hz)
+static unsigned long mxs_mmc_setclock_ssp2(unsigned long hz)
 {
-	struct clk *ssp = clk_get(NULL, "ssp.1"), *parent;
+	struct clk *ssp = clk_get(NULL, "ssp.2"), *parent;
 
 	if (hz > 1000000)
-		parent = clk_get(NULL, "ref_io.0");
+		parent = clk_get(NULL, "ref_io.1");
 	else
 		parent = clk_get(NULL, "xtal.0");
 
@@ -591,6 +654,46 @@ static struct resource mmc0_resource[] = {
 };
 
 static struct mxs_mmc_platform_data mmc1_data = {
+	.hw_init	= mxs_mmc_hw_init_ssp2,
+	.hw_release	= mxs_mmc_hw_release_ssp2,
+	.get_wp		= mxs_mmc_get_wp_ssp2,
+	.cmd_pullup	= mxs_mmc_cmd_pullup_ssp2,
+	.setclock	= mxs_mmc_setclock_ssp2,
+	.caps 		= MMC_CAP_4_BIT_DATA | MMC_CAP_8_BIT_DATA
+				| MMC_CAP_DATA_DDR,
+	.min_clk	= 400000,
+	.max_clk	= 48000000,
+	.read_uA        = 50000,
+	.write_uA       = 70000,
+	.clock_mmc = "ssp.2",
+	.power_mmc = NULL,
+};
+
+static struct resource mmc1_resource[] = {
+	{
+		.flags	= IORESOURCE_MEM,
+		.start	= SSP2_PHYS_ADDR,
+		.end	= SSP2_PHYS_ADDR + 0x2000 - 1,
+	},
+	{
+		.flags	= IORESOURCE_DMA,
+		.start	= MXS_DMA_CHANNEL_AHB_APBH_SSP2,
+		.end	= MXS_DMA_CHANNEL_AHB_APBH_SSP2,
+	},
+	{
+		.flags	= IORESOURCE_IRQ,
+		.start	= IRQ_SSP2_DMA,
+		.end	= IRQ_SSP2_DMA,
+	},
+	{
+		.flags	= IORESOURCE_IRQ,
+		.start	= IRQ_SSP2,
+		.end	= IRQ_SSP2,
+	},
+};
+
+#if 0
+static struct mxs_mmc_platform_data mmc1_data = {
 	.hw_init	= mxs_mmc_hw_init_ssp1,
 	.hw_release	= mxs_mmc_hw_release_ssp1,
 	.get_wp		= mxs_mmc_get_wp_ssp1,
@@ -604,6 +707,7 @@ static struct mxs_mmc_platform_data mmc1_data = {
 	.write_uA       = 70000,
 	.clock_mmc = "ssp.1",
 	.power_mmc = NULL,
+	.fastpath_sz = 1024,
 };
 
 static struct resource mmc1_resource[] = {
@@ -628,6 +732,7 @@ static struct resource mmc1_resource[] = {
 		.end	= IRQ_SSP1,
 	},
 };
+#endif
 
 static void __init mx28_init_mmc(void)
 {
@@ -643,7 +748,7 @@ static void __init mx28_init_mmc(void)
 		mxs_add_device(pdev, 2);
 	}
 
-	if (mxs_get_type(PINID_GPMI_RDY1) == PIN_FUN2) {
+	if (mxs_get_type(PINID_SSP0_DATA6) == PIN_FUN2) {
 		pdev = mxs_get_device("mxs-mmc", 1);
 		if (pdev == NULL || IS_ERR(pdev))
 			return;
@@ -659,7 +764,8 @@ static void mx28_init_mmc(void)
 }
 #endif
 
-#if defined(CONFIG_SPI_MXS) || defined(CONFIG_SPI_MXS_MODULE)
+#if 0
+//#if defined(CONFIG_SPI_MXS) || defined(CONFIG_SPI_MXS_MODULE)
 static struct mxs_spi_platform_data spi_data = {
 	.clk = "ssp.2",
 };
@@ -816,39 +922,35 @@ static void __init mx28_init_fec(void)
 		__raw_readl(IO_ADDRESS(OCOTP_PHYS_ADDR) + HW_OCOTP_CTRL))
 		udelay(10);
 
-	lookup = mxs_get_devices("mxs-fec");
+	lookup = mxs_get_devices("mxs-fec"); 
 	if (lookup == NULL || IS_ERR(lookup))
-		return;
+		return;                      
 
-	for (i = 0; i < lookup->size; i++) {
-		pdev = lookup->pdev + i;
-		val =  __raw_readl(IO_ADDRESS(OCOTP_PHYS_ADDR) +
-						HW_OCOTP_CUSTn(pdev->id));
-		switch (pdev->id) {
-		case 0:
-			pdev->resource = fec0_resource;
-			pdev->num_resources = ARRAY_SIZE(fec0_resource);
-			pdev->dev.platform_data = &fec_pdata0;
-			break;
-		case 1:
-			pdev->resource = fec1_resource;
-			pdev->num_resources = ARRAY_SIZE(fec1_resource);
-			pdev->dev.platform_data = &fec_pdata1;
-			break;
-		default:
-			return;
-		}
-
-		pfec = (struct fec_platform_data *)pdev->dev.platform_data;
-		pfec->mac[0] = 0x00;
-		pfec->mac[1] = 0x04;
-		pfec->mac[2] = (val >> 24) & 0xFF;
-		pfec->mac[3] = (val >> 16) & 0xFF;
-		pfec->mac[4] = (val >> 8) & 0xFF;
-		pfec->mac[5] = (val >> 0) & 0xFF;
-
-		mxs_add_device(pdev, 2);
+	pdev = lookup->pdev;
+	pdev->resource = fec0_resource;
+	pdev->num_resources = ARRAY_SIZE(fec0_resource);
+	pdev->dev.platform_data = &fec_pdata0;
+	val =  __raw_readl(IO_ADDRESS(OCOTP_PHYS_ADDR) +
+					HW_OCOTP_CUSTn(pdev->id));
+	if(0 == (val & 0xFFFFFF)) {
+		val = (unsigned short) __raw_readl(
+		  IO_ADDRESS(OCOTP_PHYS_ADDR) + HW_OCOTP_OPSn(2));
+		val |= 0x4f0000;
 	}
+	pfec = (struct fec_platform_data *)pdev->dev.platform_data;
+	pfec->mac[0] = 0x00;
+	pfec->mac[1] = 0xd0;
+	pfec->mac[2] = 0x69;
+	pfec->mac[3] = (val >> 16) & 0xFF;
+	pfec->mac[4] = (val >> 8) & 0xFF;
+	pfec->mac[5] = (val >> 0) & 0xFF;
+	__raw_writel(BM_OCOTP_CTRL_RD_BANK_OPEN,
+			IO_ADDRESS(OCOTP_PHYS_ADDR) + HW_OCOTP_CTRL_CLR);
+	while (BM_OCOTP_CTRL_BUSY &
+		__raw_readl(IO_ADDRESS(OCOTP_PHYS_ADDR) + HW_OCOTP_CTRL))
+		udelay(10);
+	
+	mxs_add_device(pdev, 2);
 }
 #else
 static void __init mx28_init_fec(void)
@@ -926,8 +1028,8 @@ static void __init mx28_init_l2switch(void)
 	pswitch = (struct switch_platform_data *)pdev->dev.platform_data;
 	pfec = pswitch->fec_enet;
 	pfec->mac[0] = 0x00;
-	pfec->mac[1] = 0x04;
-	pfec->mac[2] = (val >> 24) & 0xFF;
+	pfec->mac[1] = 0xd0;
+	pfec->mac[2] = 0x69;
 	pfec->mac[3] = (val >> 16) & 0xFF;
 	pfec->mac[4] = (val >> 8) & 0xFF;
 	pfec->mac[5] = (val >> 0) & 0xFF;
@@ -1201,8 +1303,12 @@ static ddi_bc_Cfg_t battery_data = {
 	.u8DieTempHigh			 = 75,		/* deg centigrade */
 	.u8DieTempLow			 = 65,		/* deg centigrade */
 	.u16DieTempSafeCurrent		 = 0,		/* mA */
+	.u8DieTempChannel		 = 0,		/* LRADC 0 */
 	.monitorBatteryTemp		 = 0,		/* Monitor the battery*/
-	.u8BatteryTempChannel		 = 0,		/* LRADC 0 */
+  /* There is no free LRADC channel for battery monitor.
+     LRADC 1  is also used for kbd, if LRADC_CH1 is used
+     for battery temperature. kbd device should be disabled */
+  .u8BatteryTempChannel = LRADC_CH1,
 	.u16BatteryTempHigh		 = 642,		/* Unknown units */
 	.u16BatteryTempLow		 = 497,		/* Unknown units */
 	.u16BatteryTempSafeCurrent	 = 0,		/* mA */
@@ -1301,12 +1407,19 @@ static void __init mx28_init_dcp(void)
 #endif
 
 #if defined(CONFIG_SND_MXS_SOC_DAI) || defined(CONFIG_SND_MXS_SOC_DAI_MODULE)
-static int audio_clk_init(struct clk *clk)
+static struct mxs_audio_platform_data audio_plat_data;
+
+static int audio_clk_init(void)
 {
+	struct clk *clk;
 	struct clk *pll_clk;
 	struct clk *saif_mclk0;
 	struct clk *saif_mclk1;
 	int ret = -EINVAL;
+
+	if (audio_plat_data.inited)
+		return 0;
+	clk = clk_get(NULL, "saif.0");
 	if (IS_ERR(clk)) {
 		pr_err("%s:failed to get clk\n", __func__);
 		goto err_clk_init;
@@ -1342,6 +1455,14 @@ static int audio_clk_init(struct clk *clk)
 	/*enable saif0/saif1 clk output*/
 	clk_enable(saif_mclk0);
 	clk_enable(saif_mclk1);
+
+  clk_put(clk);
+  clk_put(pll_clk);
+  clk_put(saif_mclk0);
+  clk_put(saif_mclk1);
+
+  audio_plat_data.inited = 1;
+
 err_clk_init:
 	return ret;
 }
@@ -1352,6 +1473,9 @@ static int audio_clk_finit(void)
 	struct clk *saif_mclk0;
 	struct clk *saif_mclk1;
 	int ret = 0;
+
+	if (audio_plat_data.inited == 0)
+		return 0;
 	saif_clk = clk_get(NULL, "saif.0");
 	if (IS_ERR(saif_clk)) {
 		pr_err("%s:failed to get saif_clk\n", __func__);
@@ -1359,6 +1483,7 @@ static int audio_clk_finit(void)
 		goto err_clk_finit;
 	}
 	clk_disable(saif_clk);
+  clk_put(saif_clk);
 
 	saif_mclk0 = clk_get(NULL, "saif_mclk.0");
 	if (IS_ERR(saif_mclk0)) {
@@ -1366,6 +1491,7 @@ static int audio_clk_finit(void)
 		goto err_clk_finit;
 	}
 	clk_disable(saif_mclk0);
+  clk_put(saif_mclk0);
 
 	saif_mclk1 = clk_get(NULL, "saif_mclk.1");
 	if (IS_ERR(saif_mclk1)) {
@@ -1373,11 +1499,14 @@ static int audio_clk_finit(void)
 		goto err_clk_finit;
 	}
 	clk_disable(saif_mclk1);
+  clk_put(saif_mclk1);
+
+  audio_plat_data.inited = 0;
+
 err_clk_finit:
 	return ret;
 }
 
-static struct mxs_audio_platform_data audio_plat_data;
 #endif
 
 #if defined(CONFIG_SND_SOC_SGTL5000) || defined(CONFIG_SND_SOC_SGTL5000_MODULE)
@@ -1387,10 +1516,15 @@ void __init mx28_init_audio(void)
 	if (pdev == NULL || IS_ERR(pdev))
 		return;
 	mxs_add_device(pdev, 3);
+	audio_plat_data.inited = 0;
 	audio_plat_data.saif_mclock = clk_get(NULL, "saif.0");
-	audio_clk_init(audio_plat_data.saif_mclock);
+	audio_plat_data.init = audio_clk_init;
+	audio_plat_data.finit = audio_clk_finit;
+	audio_clk_init();
 	pdev->dev.platform_data = &audio_plat_data;
 }
+
+
 #else
 void __init mx28_init_audio(void)
 {
@@ -1518,6 +1652,51 @@ static void mx28_init_persistent()
 }
 #endif
 
+#if defined(CONFIG_MXS_PERFMON)
+
+static struct mxs_perfmon_bit_config
+mx28_perfmon_bit_config[] = {
+	{.field = (1 << 0),	.name = "MID0-PXP" },
+	{.field = (1 << 1),	.name = "MID1-LCDIF" },
+	{.field = (1 << 2),	.name = "MID2-BCH" },
+	{.field = (1 << 3),	.name = "MID3-DCP" }
+};
+
+static struct mxs_platform_perfmon_data mx28_perfmon_data = {
+	.bit_config_tab = mx28_perfmon_bit_config,
+	.bit_config_cnt = ARRAY_SIZE(mx28_perfmon_bit_config),
+};
+
+static struct resource mx28_perfmon_res[] = {
+	{
+	 .flags = IORESOURCE_MEM,
+	 .start = PERFMON_PHYS_ADDR,
+	 .end   = PERFMON_PHYS_ADDR + 0x1000 - 1,
+    },
+};
+
+static void mx28_init_perfmon(void)
+{
+	struct platform_device *pdev;
+
+	pdev = mxs_get_device("mxs-perfmon", 0);
+	if (pdev == NULL || IS_ERR(pdev))
+		return;
+	pdev->dev.platform_data = &mx28_perfmon_data;
+	pdev->resource = mx28_perfmon_res,
+	pdev->num_resources = ARRAY_SIZE(mx28_perfmon_res),
+	mxs_add_device(pdev, 3);
+}
+
+#else
+
+static void mx28_init_perfmon()
+{
+}
+
+#endif
+
+
 #if defined(CONFIG_FSL_OTP)
 /* Building up eight registers's names of a bank */
 #define BANK(a, b, c, d, e, f, g, h)	\
@@ -1564,6 +1743,7 @@ static void mx28_init_otp(void)
 
 int __init mx28_device_init(void)
 {
+	mx28_init_fpgaclk();
 	mx28_init_dma();
 	mx28_init_viim();
 	mx28_init_duart();
@@ -1587,7 +1767,9 @@ int __init mx28_device_init(void)
 	mx28_init_dcp();
 	mx28_init_battery();
 	mx28_init_persistent();
+	mx28_init_perfmon();
 	mx28_init_otp();
+	mx28_init_fpga_irq();
 	return 0;
 }
 
